/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version: 1.3.22
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sdljava.x.swig;

public class SWIG_SDLEvent implements SWIG_SDLEventConstants {
  public static void SDL_PumpEvents() {
    SWIG_SDLEventJNI.SDL_PumpEvents();
  }

  public static short SDL_EventState(short type, int state) {
    return SWIG_SDLEventJNI.SDL_EventState(type, state);
  }

  public static int SDL_WaitEvent(SDL_Event event) {
    return SWIG_SDLEventJNI.SDL_WaitEvent(SDL_Event.getCPtr(event));
  }

  public static int SDL_PollEvent(SDL_Event event) {
    return SWIG_SDLEventJNI.SDL_PollEvent(SDL_Event.getCPtr(event));
  }

  public static short SDL_GetAppState() {
    return SWIG_SDLEventJNI.SDL_GetAppState();
  }

  public static int SDL_EnableUNICODE(int enable) {
    return SWIG_SDLEventJNI.SDL_EnableUNICODE(enable);
  }

  public static int SDL_EnableKeyRepeat(int delay, int interval) {
    return SWIG_SDLEventJNI.SDL_EnableKeyRepeat(delay, interval);
  }

  public static SWIGTYPE_p_unsigned_char SDL_GetKeyState(SWIGTYPE_p_int numkeys) {
    long cPtr = SWIG_SDLEventJNI.SDL_GetKeyState(SWIGTYPE_p_int.getCPtr(numkeys));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static int SDL_GetModState() {
    return SWIG_SDLEventJNI.SDL_GetModState();
  }

  public static void SDL_SetModState(int modstate) {
    SWIG_SDLEventJNI.SDL_SetModState(modstate);
  }

  public static String SDL_GetKeyName(int key) {
    return SWIG_SDLEventJNI.SDL_GetKeyName(key);
  }

  public static int SDL_JoystickEventState(int state) {
    return SWIG_SDLEventJNI.SDL_JoystickEventState(state);
  }

  public static short SDL_GetMouseState(int[] arg0, int[] arg1) {
    return SWIG_SDLEventJNI.SDL_GetMouseState(arg0, arg1);
  }

  public static short SDL_GetRelativeMouseState(int[] arg0, int[] arg1) {
    return SWIG_SDLEventJNI.SDL_GetRelativeMouseState(arg0, arg1);
  }

  public static void SDL_WarpMouse(int x, int y) {
    SWIG_SDLEventJNI.SDL_WarpMouse(x, y);
  }

  public static SWIGTYPE_p_SDL_Cursor SDL_CreateCursor(SWIGTYPE_p_unsigned_char data, SWIGTYPE_p_unsigned_char mask, int w, int h, int hot_x, int hot_y) {
    long cPtr = SWIG_SDLEventJNI.SDL_CreateCursor(SWIGTYPE_p_unsigned_char.getCPtr(data), SWIGTYPE_p_unsigned_char.getCPtr(mask), w, h, hot_x, hot_y);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_Cursor(cPtr, false);
  }

  public static void SDL_SetCursor(SWIGTYPE_p_SDL_Cursor cursor) {
    SWIG_SDLEventJNI.SDL_SetCursor(SWIGTYPE_p_SDL_Cursor.getCPtr(cursor));
  }

  public static SWIGTYPE_p_SDL_Cursor SDL_GetCursor() {
    long cPtr = SWIG_SDLEventJNI.SDL_GetCursor();
    return (cPtr == 0) ? null : new SWIGTYPE_p_SDL_Cursor(cPtr, false);
  }

  public static void SDL_FreeCursor(SWIGTYPE_p_SDL_Cursor cursor) {
    SWIG_SDLEventJNI.SDL_FreeCursor(SWIGTYPE_p_SDL_Cursor.getCPtr(cursor));
  }

  public static int SDL_ShowCursor(int toggle) {
    return SWIG_SDLEventJNI.SDL_ShowCursor(toggle);
  }

}
