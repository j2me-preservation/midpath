/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "gxj_putpixel.h"
/* Header for class org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData */

#ifndef _Included_org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData
#define _Included_org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData
#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData
 * Method:    initFieldIDs
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData_initFieldIDs(JNIEnv *env, jclass cls);

JNIEXPORT void JNICALL Java_org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData_allocateNativeData
  (JNIEnv *env, jobject imageData, jint width, jint height, jboolean allocateAlpha);

JNIEXPORT void JNICALL Java_org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData_freeNativeData
  (JNIEnv *env, jobject imageData);

JNIEXPORT void JNICALL Java_org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData_fillNativePixelData
  (JNIEnv *env, jobject dstImageData, jobject srcImageData);

JNIEXPORT void JNICALL Java_org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData_clearNativePixelData
  (JNIEnv *env, jobject imageData);

/*
 * Class:     org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData
 * Method:    getRGB
 * Signature: ([IIIIIII)V
 */
JNIEXPORT void JNICALL Java_org_thenesis_microbackend_ui_graphics_toolkit_gxj_ImageData_getRGB
  (JNIEnv *, jobject, jintArray, jint, jint, jint, jint, jint, jint);

gxj_screen_buffer* getScreenBufferFromImageData(JNIEnv *env, jobject imageData, gxj_screen_buffer *sbuf);

void releaseScreenBufferPrimitiveArrays(JNIEnv *env, gxj_screen_buffer *sbuf);

#ifdef __cplusplus
}
#endif
#endif
